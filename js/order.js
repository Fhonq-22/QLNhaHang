import { database } from "./firebase-config.js";
import { ref, get, set, update } from "https://www.gstatic.com/firebasejs/11.0.2/firebase-database.js";

document.addEventListener("DOMContentLoaded", function () {
    const danhSachMonAn = document.getElementById("danh-sach-mon-an");
    const chonDanhMuc = document.getElementById("chon-danh-muc");
    const timKiem = document.getElementById("tim-kiem");
    const btnGioHang = document.getElementById("btn-gio-hang");
    const soLuongGioHang = document.getElementById("so-luong-gio-hang");
    const overlay = document.getElementById("overlay");
    const gioHangPopup = document.getElementById("gio-hang-popup");
    const btnDongGioHang = document.getElementById("dong-gio-hang");
    const gioHangChiTiet = document.getElementById("gio-hang-chi-tiet");
    const formDatMon = document.getElementById("form-dat-mon");
    const maDatMonInput = document.getElementById("ma-dat-mon");
    const tuTaoMaCheckbox = document.getElementById("tu-tao-ma");
    const btnXacNhanDatMon = document.getElementById("xac-nhan-dat-mon");
    const btnHuyDatMon = document.getElementById("huy-dat-mon");
    const userInfo = document.getElementById("btn-user");

    const username = localStorage.getItem("username");
    async function kiemTraDangNhap() {
        if (!username) return;
        try {
            const snapshot = await get(ref(database, `Users/${username}`));
            if (snapshot.exists()) {
                userInfo.textContent = `üë§ ${username}`;
            } else {
                localStorage.removeItem("username");
            }
        } catch (error) {
            console.error("L·ªói khi l·∫•y th√¥ng tin ng∆∞·ªùi d√πng:", error);
        }
    }
    kiemTraDangNhap();

    // Local Storage - Gi·ªè h√†ng
    let gioHang = JSON.parse(localStorage.getItem("gioHang")) || {};
    function luuGioHang() {
        localStorage.setItem("gioHang", JSON.stringify(gioHang));
        capNhatSoLuongGioHang();
    }
    function capNhatSoLuongGioHang() {
        soLuongGioHang.textContent = Object.values(gioHang).reduce((acc, sl) => acc + sl, 0);
    }

    // Gi·ªè h√†ng
    function themVaoGioHang(maMon) {
        let btnDatMon = document.querySelector(`.them-vao-gio[data-mamon="${maMon}"]`);
        let gioHangIcon = document.querySelector("#btn-gio-hang");
    
        if (!btnDatMon || !gioHangIcon) {
            console.error("L·ªñI: Kh√¥ng t√¨m th·∫•y ph·∫ßn t·ª≠!");
            return;
        }
    
        // C·∫≠p nh·∫≠t gi·ªè h√†ng
        gioHang[maMon] = (gioHang[maMon] || 0) + 1;
        luuGioHang();
    
        // L·∫•y v·ªã tr√≠ b·∫Øt ƒë·∫ßu v√† k·∫øt th√∫c
        let rectStart = btnDatMon.getBoundingClientRect();
        let rectEnd = gioHangIcon.getBoundingClientRect();
    
        // T·∫°o icon bay
        let flyItem = document.createElement("span");
        flyItem.classList.add("fly-item");
        flyItem.innerText = "üõí"; // Ho·∫∑c d√πng h√¨nh ·∫£nh s·∫£n ph·∫©m n·∫øu mu·ªën
        document.body.appendChild(flyItem);
    
        // ƒê·∫∑t v·ªã tr√≠ ban ƒë·∫ßu
        flyItem.style.left = rectStart.left + "px";
        flyItem.style.top = rectStart.top + "px";
    
        // Th√™m hi·ªáu ·ª©ng bay
        setTimeout(() => {
            flyItem.style.transform = `translate(${rectEnd.left - rectStart.left}px, ${rectEnd.top - rectStart.top}px) scale(0.3)`;
            flyItem.style.opacity = "0";
        }, 50);
    
        // X√≥a sau khi hi·ªáu ·ª©ng ho√†n t·∫•t
        setTimeout(() => {
            flyItem.remove();
        }, 1500);
    }    
    
    function hienThiGioHang() {
        gioHangChiTiet.innerHTML = Object.keys(gioHang).length === 0
            ? "<li>Gi·ªè h√†ng tr·ªëng</li>"
            : Object.keys(gioHang).map(maMon => `
            <li>
                <span>${maMon} (x${gioHang[maMon]})</span>
                <button class="xoa-mon" data-mamon="${maMon}">‚ùå</button>
            </li>`).join("") + `<li><button id="dat-mon">ƒê·∫∑t m√≥n</button></li>`;
        gioHangChiTiet.querySelectorAll(".xoa-mon").forEach(button => {
            button.addEventListener("click", (e) => {
                delete gioHang[e.target.dataset.mamon];
                luuGioHang();
                hienThiGioHang();
            });
        });
        const nutDatMon = document.getElementById("dat-mon");
        if (nutDatMon) {
            nutDatMon.addEventListener("click", () => {
                if (!username) {
                    alert("B·∫°n c·∫ßn ƒëƒÉng nh·∫≠p ƒë·ªÉ ƒë·∫∑t m√≥n!");
                    return;
                }
                formDatMon.classList.remove("hidden");
            });
        }
    }

    // ƒê·∫∑t m√≥n
    btnXacNhanDatMon.addEventListener("click", async () => {
        const maDatMon = maDatMonInput.value.trim();
        if (!maDatMon) {
            alert("Vui l√≤ng nh·∫≠p ƒë·∫ßy ƒë·ªß th√¥ng tin!");
            return;
        }
        try {
            const userRef = ref(database, `KhachHang/${username}`);
            const userSnapshot = await get(userRef);
            
            if (!userSnapshot.exists()) {
                alert("Kh√¥ng t√¨m th·∫•y th√¥ng tin kh√°ch h√†ng!");
                return;
            }
    
            const userData = userSnapshot.val();
            const address = userData.DiaChi?.trim();
    
            if (!address) {
                alert("B·∫°n c·∫ßn th√™m ƒë·ªãa ch·ªâ ƒë·ªÉ ch√∫ng t√¥i c√≥ th·ªÉ giao ƒë∆°n ƒë·∫∑t!");
                return;
            }
    
            const thoiGianDat = new Date().toISOString();
            const tongTien = Object.entries(gioHang).reduce((sum, [_, soLuong]) => sum + (soLuong * 50000), 0);
    
            // üîπ Ti·∫øn h√†nh ƒë·∫∑t m√≥n
            await set(ref(database, `DatMon/${maDatMon}`), {
                MaKhach: username,
                ThoiGianDat: thoiGianDat,
                DanhSachMon: { ...gioHang },
                TongTien: tongTien,
                DiaChi: address, // L∆∞u ƒë·ªãa ch·ªâ l·∫•y t·ª´ Firebase
                TrangThai: "ƒêang x·ª≠ l√Ω",
            });
    
            alert("ƒê·∫∑t m√≥n th√†nh c√¥ng!");
            gioHang = {};
            luuGioHang();
            hienThiGioHang();
            formDatMon.classList.add("hidden");
        } catch (error) {
            console.error("L·ªói ƒë·∫∑t m√≥n:", error);
            alert("L·ªói khi ƒë·∫∑t m√≥n, vui l√≤ng th·ª≠ l·∫°i.");
        }
    });
    
    btnHuyDatMon.addEventListener("click", () => formDatMon.classList.add("hidden"));

    tuTaoMaCheckbox.addEventListener("change", () => {
        maDatMonInput.value = tuTaoMaCheckbox.checked ? "DAT" + Date.now() : "";
        maDatMonInput.disabled = tuTaoMaCheckbox.checked;
    });

    // L·∫•y danh m·ª•c v√† m√≥n ƒÉn t·ª´ Firebase
    async function layDanhSachDanhMuc() {
        try {
            const snapshot = await get(ref(database, "Menu"));
            if (snapshot.exists()) {
                chonDanhMuc.innerHTML += Object.keys(snapshot.val()).map(danhMuc => `<option value="${danhMuc}">${danhMuc}</option>`).join("");
            }
        } catch (error) {
            console.error("L·ªói khi l·∫•y danh m·ª•c:", error);
        }
    }
    async function layDanhSachMonAn(danhMucDaChon = "tat-ca", tuKhoaTimKiem = "") {
        danhSachMonAn.innerHTML = "";
        try {
            const snapshot = await get(ref(database, "Menu"));
            if (!snapshot.exists()) return;
            const fragment = document.createDocumentFragment();
            const tuKhoa = tuKhoaTimKiem.toLowerCase();
            Object.entries(snapshot.val()).forEach(([danhMuc, monAnList]) => {
                if (danhMucDaChon !== "tat-ca" && danhMucDaChon !== danhMuc) return;
                Object.entries(monAnList).forEach(([maMon, monAn]) => {
                    if ([monAn.TenMon, monAn.MoTa, monAn.Gia.toString()].some(field => field.toLowerCase().includes(tuKhoa))) {
                        const monAnDiv = document.createElement("div");
                        monAnDiv.classList.add("mon-an");
                        monAnDiv.innerHTML = `
                        <img src="${monAn.HinhAnh}" alt="${monAn.TenMon}">
                        <h3>${monAn.TenMon}</h3>
                        <p>${monAn.MoTa}</p>
                        <p>${monAn.Gia.toLocaleString('vi-VN')} VND</p>
                        <button class="them-vao-gio" data-mamon="${maMon}">Th√™m v√†o gi·ªè h√†ng</button>`;
                        fragment.appendChild(monAnDiv);
                    }
                });
            });
            danhSachMonAn.appendChild(fragment);
        } catch (error) {
            console.error("L·ªói khi l·∫•y danh s√°ch m√≥n ƒÉn:", error);
        }
    }

    // S·ª± ki·ªán
    chonDanhMuc.addEventListener("change", () => layDanhSachMonAn(chonDanhMuc.value, timKiem.value));
    timKiem.addEventListener("input", () => layDanhSachMonAn(chonDanhMuc.value, timKiem.value));
    danhSachMonAn.addEventListener("click", (e) => {
        if (e.target.classList.contains("them-vao-gio")) themVaoGioHang(e.target.dataset.mamon);
    });
    btnGioHang.addEventListener("click", () => {
        hienThiGioHang();
        gioHangPopup.classList.remove("hidden");
        overlay.classList.remove("hidden");
    });
    btnDongGioHang.addEventListener("click", () => {
        gioHangPopup.classList.add("hidden");
        overlay.classList.add("hidden");
    });

    const userModal = document.getElementById("user-modal");
    const closeModal = document.querySelector(".close");

    document.getElementById("btn-user").addEventListener("click", function () {
        const username = localStorage.getItem("username");
        if (!username) {
            window.location.href = "auth.html"; // Chuy·ªÉn ƒë·∫øn trang ƒëƒÉng nh·∫≠p n·∫øu ch∆∞a ƒëƒÉng nh·∫≠p
        } else {
            // Hi·ªÉn th·ªã modal th√¥ng tin t√†i kho·∫£n
            userModal.style.display = "flex";
            userModal.classList.add("show");

            const userRef = ref(database, `KhachHang/${username}`);

            get(userRef)
                .then((snapshot) => {
                    if (snapshot.exists()) {
                        const userData = snapshot.val();

                        // ƒê·ªï d·ªØ li·ªáu v√†o form
                        document.getElementById("ho-ten").value = userData.HoTen || "";
                        document.getElementById("ngay-sinh").value = userData.NgaySinh.split("T")[0] || "";
                        document.getElementById("dia-chi").value = userData.DiaChi || "";
                        document.getElementById("mon-yeu-thich").value = userData.MonYeuThich || "";
                        document.getElementById("hang-thanh-vien").value = userData.HangThanhVien || "";
                        document.getElementById("diem-tich-luy").value = userData.DiemTichLuy || 0;
                        document.getElementById("tong-chi-tieu").value = userData.TongChiTieu || 0;
                    } else {
                        alert("Kh√¥ng t√¨m th·∫•y th√¥ng tin kh√°ch h√†ng!");
                    }
                })
                .catch((error) => {
                    console.error("L·ªói khi l·∫•y d·ªØ li·ªáu kh√°ch h√†ng:", error);
                    alert("L·ªói khi t·∫£i th√¥ng tin, vui l√≤ng th·ª≠ l·∫°i.");
                });
        }
    });

    // X·ª≠ l√Ω ƒë√≥ng modal
    closeModal.addEventListener("click", function () {
        userModal.style.display = "none";
        userModal.classList.remove("show");

    });

    // C·∫≠p nh·∫≠t th√¥ng tin
    document.getElementById("btn-cap-nhat").addEventListener("click", function () {
        if (!username) {
            alert("B·∫°n c·∫ßn ƒëƒÉng nh·∫≠p ƒë·ªÉ c·∫≠p nh·∫≠t th√¥ng tin!");
            return;
        }
    
        const updatedData = {
            HoTen: document.getElementById("ho-ten").value,
            NgaySinh: document.getElementById("ngay-sinh").value + "T00:00:00",
            DiaChi: document.getElementById("dia-chi").value,
            MonYeuThich: document.getElementById("mon-yeu-thich").value,
        };
    
        const userRef = ref(database, `KhachHang/${username}`);
    
        update(userRef, updatedData)
            .then(() => {
                alert("C·∫≠p nh·∫≠t th√¥ng tin th√†nh c√¥ng!");
                console.log("Th√¥ng tin ƒë√£ c·∫≠p nh·∫≠t:", updatedData);
            })
            .catch((error) => {
                console.error("L·ªói khi c·∫≠p nh·∫≠t th√¥ng tin:", error);
                alert("L·ªói khi c·∫≠p nh·∫≠t, vui l√≤ng th·ª≠ l·∫°i.");
            });
    });

    // X·ª≠ l√Ω ƒëƒÉng xu·∫•t
    document.getElementById("btn-logout").addEventListener("click", function () {
        localStorage.removeItem("username"); // Xo√° username kh·ªèi localStorage
        userModal.style.display = "none"; // ƒê√≥ng modal
        location.reload();
    });

    layDanhSachDanhMuc();
    layDanhSachMonAn();
    capNhatSoLuongGioHang();
});

window.handleUserClick = function () {
    const username = localStorage.getItem("username");
    if (!username) {
        window.location.href = "auth.html";
    }
};
